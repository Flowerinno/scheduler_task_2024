generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum STATUS {
  ACTIVE
  INACTIVE
}

model User {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  firstName        String
  lastName         String
  password         String
  status           STATUS         @default(ACTIVE)
  notification     Notification[] @relation("ReceivedByNotifications")
  sentNotification Notification[] @relation("SentByNotification")
  project          Project[]
  log              Log[]
  client           Client[]       @relation("ClientToUser")
  createdClients   Client[]       @relation("ClientCreatedByUser")
}

model Client {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  email         String
  firstName     String
  lastName      String
  logs          Log[]
  role          Role            @default(USER)
  createdBy     User?           @relation("ClientCreatedByUser", fields: [createdById], references: [id])
  createdById   String?
  project       Project         @relation(fields: [projectId], references: [id])
  projectId     String
  status        STATUS          @default(ACTIVE)
  clientsOnTags ClientsOnTags[]
  user          User            @relation("ClientToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@index([projectId, userId])
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  log         Log[]
  clients     Client[]
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  status      STATUS   @default(ACTIVE)
  tag         Tag[]

  @@index([createdById])
}

model Log {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String    @default("Untitled")
  content      String    @default("-")
  date         DateTime  @default(now()) //indexed
  startTime    DateTime  @default(now())
  endTime      DateTime?
  duration     Float?
  isBillable   Boolean   @default(false)
  isApproved   Boolean   @default(false)
  isAbsent     Boolean   @default(false)
  modifiedBy   User?     @relation(fields: [modifiedById], references: [id])
  modifiedById String?
  client       Client    @relation(fields: [clientId], references: [id])
  clientId     String
  project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?
  version      Int       @default(1)

  @@index([clientId, projectId, date])
}

model Notification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  checkedAt DateTime?
  message   String
  user      User      @relation("ReceivedByNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  sentBy    User      @relation("SentByNotification", fields: [sentById], references: [id], onDelete: Cascade)
  sentById  String
  answer    Boolean?
  projectId String?

  @@index([userId, projectId, sentById])
}

model Tag {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        STATUS          @default(ACTIVE)
  project       Project         @relation(fields: [projectId], references: [id])
  projectId     String
  clientsOnTags ClientsOnTags[]

  @@index([projectId])
}

model ClientsOnTags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String
  projectId String

  @@index([clientId, tagId, projectId])
}
