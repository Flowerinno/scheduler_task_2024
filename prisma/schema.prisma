// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum STATUS {
  ACTIVE
  INACTIVE
}

model User {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  firstName        String
  lastName         String
  password         String
  role             Role           @default(USER)
  status           STATUS         @default(ACTIVE)
  notification     Notification[] @relation("ReceivedByNotifications")
  sentNotification Notification[] @relation("SentByNotification")
  client           Client[]
}

model Client {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  email             String
  firstName         String
  lastName          String
  logs              Log[]
  role              Role                @default(USER)
  createdById       String?
  clientsOnProjects ClientsOnProjects[]
  status            STATUS              @default(ACTIVE)
  clientsOnTags     ClientsOnTags[]
  user              User                @relation(fields: [userId], references: [id])
  userId            String
}

model Project {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String
  description       String?
  log               Log[]
  clientsOnProjects ClientsOnProjects[]
  createdById       String
  status            STATUS              @default(ACTIVE)
  tag               Tag[]

  @@index([createdById])
}

model Log {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  content      String
  startTime    DateTime  @default(now())
  endTime      DateTime?
  duration     Float?
  isBillable   Boolean   @default(true)
  isApproved   Boolean   @default(false)
  isAbsent     Boolean   @default(false)
  modifiedById String?
  client       Client    @relation(fields: [clientId], references: [id])
  clientId     String
  project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?

  @@index([clientId, projectId, createdAt, modifiedById])
}

model Notification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  checkedAt DateTime?
  message   String
  user      User      @relation("ReceivedByNotifications", fields: [userId], references: [id])
  userId    String
  sentBy    User      @relation("SentByNotification", fields: [sentById], references: [id])
  sentById  String
  answer    Boolean?
  projectId String?
}

model Tag {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        STATUS          @default(ACTIVE)
  project       Project         @relation(fields: [projectId], references: [id])
  projectId     String
  clientsOnTags ClientsOnTags[]
}

model ClientsOnProjects {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String

  @@index([projectId, clientId])
}

model ClientsOnTags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String

  @@index([clientId, tagId])
}
